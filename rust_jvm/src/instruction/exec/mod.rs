use crate::instruction::Instruction;
use crate::instruction::Instruction::*;
use crate::jvm::call::{FlowControl, StackFrame};
use crate::jvm::JavaEnv;
use parking_lot::RwLock;
use std::sync::Arc;

// TODO: Rename after sections in specification
pub mod array;
pub mod class;
pub mod cmp;
pub mod convert;
pub mod general;
pub mod locals;
pub mod math;
pub mod push_const;
pub mod stack;

impl Instruction {
    pub fn exec(
        &self,
        stack: &mut StackFrame,
        jvm: &mut Arc<RwLock<JavaEnv>>,
    ) -> Result<(), FlowControl> {
        match self {
            aaload => array::aaload(stack),
            aastore => array::aastore(stack),
            aconst_null => push_const::aconst_null(stack),
            aload(index) => locals::aload(stack, *index),
            anewarray(index) => array::anewarray(stack, *index),
            areturn => return general::areturn(stack),
            arraylength => array::arraylength(stack),
            astore(index) => locals::astore(stack, *index),
            athrow => return general::athrow(stack),
            baload => array::baload(stack),
            bastore => array::bastore(stack),
            bipush(value) => general::bipush(stack, *value),
            caload => array::caload(stack),
            castore => array::castore(stack),
            checkcast(index) => return general::checkcast(stack, jvm, *index),
            d2f => convert::d2f(stack),
            d2i => convert::d2i(stack),
            d2l => convert::d2l(stack),
            dadd => math::dadd(stack),
            daload => array::daload(stack),
            dastore => array::dastore(stack),
            dcmpg => cmp::dcmpg(stack),
            dcmpl => cmp::dcmpl(stack),
            dconst_0 => push_const::dconst_0(stack),
            dconst_1 => push_const::dconst_1(stack),
            ddiv => math::ddiv(stack),
            dload(index) => locals::dload(stack, *index),
            dmul => math::dmul(stack),
            dneg => math::dneg(stack),
            drem => math::drem(stack),
            dreturn => return general::dreturn(stack),
            dstore(index) => locals::dstore(stack, *index),
            dsub => math::dsub(stack),
            dup => stack::dup(stack),
            dup_x1 => stack::dup_x1(stack),
            dup_x2 => stack::dup_x2(stack),
            dup2 => stack::dup2(stack),
            dup2_x1 => stack::dup2_x1(stack),
            dup2_x2 => stack::dup2_x2(stack),
            f2d => convert::f2d(stack),
            f2i => convert::f2i(stack),
            f2l => convert::f2l(stack),
            fadd => math::fadd(stack),
            faload => array::faload(stack),
            fastore => array::fastore(stack),
            fcmpg => cmp::fcmpg(stack),
            fcmpl => cmp::fcmpl(stack),
            fconst_0 => push_const::fconst_0(stack),
            fconst_1 => push_const::fconst_1(stack),
            fconst_2 => push_const::fconst_2(stack),
            fdiv => math::fdiv(stack),
            fload(index) => locals::fload(stack, *index),
            fmul => math::fmul(stack),
            fneg => math::fneg(stack),
            frem => math::frem(stack),
            freturn => return general::freturn(stack),
            fstore(index) => locals::fstore(stack, *index),
            fsub => math::fsub(stack),
            getfield(index) => return class::getfield(stack, *index),
            getstatic(index) => class::getstatic(stack, jvm, *index),
            goto(offset) => return general::goto(*offset),
            goto_w(offset) => return general::goto_w(*offset),
            i2b => convert::i2b(stack),
            i2c => convert::i2c(stack),
            i2d => convert::i2d(stack),
            i2f => convert::i2f(stack),
            i2l => convert::i2l(stack),
            i2s => convert::i2s(stack),
            iadd => math::iadd(stack),
            iaload => array::iaload(stack),
            iand => math::iand(stack),
            iastore => array::iastore(stack),
            iconst_m1 => push_const::iconst_m1(stack),
            iconst_0 => push_const::iconst_0(stack),
            iconst_1 => push_const::iconst_1(stack),
            iconst_2 => push_const::iconst_2(stack),
            iconst_3 => push_const::iconst_3(stack),
            iconst_4 => push_const::iconst_4(stack),
            iconst_5 => push_const::iconst_5(stack),
            idiv => math::idiv(stack),
            if_acmpeq(offset) => return cmp::if_acmpeq(stack, *offset),
            if_acmpne(offset) => return cmp::if_acmpne(stack, *offset),
            if_icmpeq(offset) => return cmp::if_icmpeq(stack, *offset),
            if_icmpne(offset) => return cmp::if_icmpne(stack, *offset),
            if_icmplt(offset) => return cmp::if_icmplt(stack, *offset),
            if_icmpge(offset) => return cmp::if_icmpge(stack, *offset),
            if_icmpgt(offset) => return cmp::if_icmpgt(stack, *offset),
            if_icmple(offset) => return cmp::if_icmple(stack, *offset),
            ifeq(offset) => return cmp::ifeq(stack, *offset),
            ifne(offset) => return cmp::ifne(stack, *offset),
            iflt(offset) => return cmp::iflt(stack, *offset),
            ifge(offset) => return cmp::ifge(stack, *offset),
            ifgt(offset) => return cmp::ifgt(stack, *offset),
            ifle(offset) => return cmp::ifle(stack, *offset),
            ifnonnull(offset) => return cmp::ifnonnull(stack, *offset),
            ifnull(offset) => return cmp::ifnull(stack, *offset),
            iload(index) => locals::iload(stack, *index),
            imul => math::imul(stack),
            ineg => math::ineg(stack),
            instanceof(index) => class::instanceof(stack, jvm, *index),
            invokespecial(index) => return class::invokespecial(stack, jvm, *index),
            invokestatic(index) => return class::invokestatic(stack, jvm, *index),
            invokevirtual(index) => return class::invokevirtual(stack, jvm, *index),
            ior => math::ior(stack),
            irem => math::irem(stack),
            ireturn => return general::ireturn(stack),
            ishl => math::ishl(stack),
            ishr => math::ishr(stack),
            istore(index) => locals::istore(stack, *index),
            isub => math::isub(stack),
            iushr => math::iushr(stack),
            ixor => math::ixor(stack),
            jsr(offset) => return general::jsr(stack, *offset),
            jsr_w(offset) => return general::jsr_w(stack, *offset),
            l2d => convert::l2d(stack),
            l2f => convert::l2f(stack),
            l2i => convert::l2i(stack),
            ladd => math::ladd(stack),
            laload => array::laload(stack),
            land => math::land(stack),
            lastore => array::lastore(stack),
            lcmp => cmp::lcmp(stack),
            lconst_0 => push_const::lconst_0(stack),
            lconst_1 => push_const::lconst_1(stack),
            ldc(index) => general::ldc(stack, jvm, *index),
            ldc_w(index) => general::ldc_w(stack, jvm, *index),
            ldc2_w(index) => general::ldc2_w(stack, *index),
            ldiv => math::ldiv(stack),
            lload(index) => locals::lload(stack, *index),
            lmul => math::lmul(stack),
            lneg => math::lneg(stack),
            lor => math::lor(stack),
            lrem => math::lrem(stack),
            lreturn => return general::lreturn(stack),
            lshl => math::lshl(stack),
            lshr => math::lshr(stack),
            lstore(index) => locals::lstore(stack, *index),
            lsub => math::lsub(stack),
            lushr => math::lushr(stack),
            lxor => math::lxor(stack),
            monitorenter => return general::monitorenter(stack, jvm),
            monitorexit => return general::monitorexit(stack, jvm),
            multianewarray { .. } => {}
            new(index) => class::new(stack, jvm, *index),
            newarray(index) => array::newarray(stack, *index),
            nop => stack::nop(),
            pop => stack::pop(stack),
            pop2 => stack::pop2(stack),
            putfield(index) => return class::putfield(stack, *index),
            putstatic(index) => class::putstatic(stack, jvm, *index),
            ret(index) => return general::ret(stack, *index),
            r#return => return general::r#return(),
            saload => array::saload(stack),
            sastore => array::sastore(stack),
            sipush(value) => general::sipush(stack, *value),
            swap => stack::swap(stack),
            invokeinterface { index, .. } => return class::invokeinterface(stack, jvm, *index),
            iinc { index, const_inc } => general::iinc(stack, *index, *const_inc),
            lookupswitch {
                default_offset,
                match_offset,
            } => return general::lookupswitch(stack, *default_offset, match_offset),
            tableswitch {
                default_offset,
                low,
                jump_offsets,
            } => return general::tableswitch(stack, *default_offset, *low, jump_offsets),
            invokedynamic(index) => return class::invokedynamic(stack, jvm, *index),
        }

        Ok(())
    }
}
